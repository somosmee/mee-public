{"version":3,"sources":["hooks/useCompany.js","graphql/company/queries.js","views/MemberInviteView/styles.js","views/MemberInviteView/index.js","containers/MemberInviteContainer/index.js"],"names":["useCompany","openSnackbar","useSnackbar","useLazyQuery","GET_MY_COMPANY","getMyCompanyQuery","getMyCompanyResult","GET_MY_COMPANIES","getMyCompaniesQuery","getMyCompaniesResult","useMutation","UPDATE_MY_COMPANY","updateMyCompanyMutate","updateMyCompanyResult","SIGNIN_COMPANY","signinCompanyMutate","signinCompanyResult","CREATE_MEMBER","createMemberMutate","createMemberResult","CREATE_COMPANY","createCompanyMutate","createCompanyResult","DELETE_MEMBER","deleteMemberMutate","deleteMemberResult","ACCEPT_INVITE","acceptInviteMutate","acceptInviteResult","getMyCompany","useCallback","input","variables","getMyCompanies","signinCompany","options","message","a","data","variant","updateMyCompany","address","analytics","logEvent","FirebaseEvents","SET_ADDRESS","createMember","deleteMember","acceptInvite","createCompany","refetch","gql","COMPANY_ATTRIBUTES","USER_ATTRIBUTES","useStyles","makeStyles","theme","root","position","display","justifyContent","alignItems","width","height","breakpoints","up","background","backgroundSize","MemberInviteView","classes","location","useLocation","history","useHistory","refetchQueries","query","GET_APP","GET_ME","awaitRefetchQueries","UPDATE_APP","updateApp","useEffect","title","document","SCREEN_VIEW","screen_name","getSearch","inviteToken","company","user","token","signup","save","TOKEN_KEY","subscription","PAYMENT_METHOD_KEY","logged","push","Paths","profile","path","console","log","validateInvite","className","Grid","container","spacing","direction","justify","item","CircularProgress","ExternalSigninContainer","defaultProps"],"mappings":"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","file":"static/js/44.87cd78d0.chunk.js","sourcesContent":["import { useCallback } from 'react'\n\nimport { useLazyQuery, useMutation } from '@apollo/react-hooks'\n\nimport {\n  GET_MY_COMPANY,\n  GET_MY_COMPANIES,\n  UPDATE_MY_COMPANY,\n  CREATE_MEMBER,\n  DELETE_MEMBER,\n  ACCEPT_INVITE,\n  SIGNIN_COMPANY,\n  CREATE_COMPANY\n} from 'src/graphql/company/queries'\n\nimport useSnackbar from 'src/hooks/useSnackbar'\n\nimport { FirebaseEvents } from 'src/utils/enums'\n\nimport { analytics } from 'src/firebase'\n\nconst useCompany = () => {\n  const { openSnackbar } = useSnackbar()\n\n  const [getMyCompanyQuery, getMyCompanyResult] = useLazyQuery(GET_MY_COMPANY)\n  const [getMyCompaniesQuery, getMyCompaniesResult] = useLazyQuery(GET_MY_COMPANIES)\n\n  const [updateMyCompanyMutate, updateMyCompanyResult] = useMutation(UPDATE_MY_COMPANY)\n  const [signinCompanyMutate, signinCompanyResult] = useMutation(SIGNIN_COMPANY)\n  const [createMemberMutate, createMemberResult] = useMutation(CREATE_MEMBER)\n  const [createCompanyMutate, createCompanyResult] = useMutation(CREATE_COMPANY)\n  const [deleteMemberMutate, deleteMemberResult] = useMutation(DELETE_MEMBER)\n  const [acceptInviteMutate, acceptInviteResult] = useMutation(ACCEPT_INVITE)\n\n  /**\n   * QUERIES\n   */\n\n  const getMyCompany = useCallback((input) => {\n    getMyCompanyQuery({ variables: { input } })\n  }, [])\n\n  const getMyCompanies = useCallback((input) => {\n    getMyCompaniesQuery({ variables: { input } })\n  }, [])\n\n  /**\n   * MUTATIONS\n   */\n\n  const signinCompany = async (input, options = { message: 'Informações atualizadas!' }) => {\n    try {\n      const {\n        data: { signinCompany }\n      } = await signinCompanyMutate({ variables: { input } })\n\n      openSnackbar({ variant: 'success', message: options.message })\n\n      return signinCompany\n    } catch (error) {\n      openSnackbar({ variant: 'error', message: error.message })\n      throw error\n    }\n  }\n\n  const updateMyCompany = async (input, options = { message: 'Informações atualizadas!' }) => {\n    try {\n      const {\n        data: { updateMyCompany }\n      } = await updateMyCompanyMutate({ variables: { input } })\n\n      if (input.address) {\n        analytics.logEvent(FirebaseEvents.SET_ADDRESS)\n      }\n\n      openSnackbar({ variant: 'success', message: options.message })\n\n      return updateMyCompany\n    } catch (error) {\n      openSnackbar({ variant: 'error', message: error.message })\n      throw error\n    }\n  }\n\n  const createMember = async (input, options = { message: 'Convite enviado!' }) => {\n    try {\n      const {\n        data: { createMember }\n      } = await createMemberMutate({ variables: { input } })\n\n      openSnackbar({ variant: 'success', message: options.message })\n\n      return createMember\n    } catch (error) {\n      openSnackbar({ variant: 'error', message: error.message })\n      throw error\n    }\n  }\n\n  const deleteMember = async (input, options = { message: 'Convite enviado!' }) => {\n    try {\n      const {\n        data: { deleteMember }\n      } = await deleteMemberMutate({ variables: { input } })\n\n      openSnackbar({ variant: 'success', message: options.message })\n\n      return deleteMember\n    } catch (error) {\n      openSnackbar({ variant: 'error', message: error.message })\n      throw error\n    }\n  }\n\n  const acceptInvite = async (input, options = {}) => {\n    try {\n      const {\n        data: { acceptInvite }\n      } = await acceptInviteMutate({ variables: { input } })\n\n      return acceptInvite\n    } catch (error) {\n      openSnackbar({ variant: 'error', message: error.message })\n      throw error\n    }\n  }\n\n  const createCompany = async (input, options = {}) => {\n    try {\n      const {\n        data: { createMember }\n      } = await createCompanyMutate({ variables: { input } })\n\n      if (options.message) {\n        openSnackbar({ variant: 'success', message: options.message })\n      }\n\n      // eslint-disable-next-line\n      getMyCompaniesResult?.refetch?.()\n\n      return createMember\n    } catch (error) {\n      openSnackbar({ variant: 'error', message: error.message })\n      throw error\n    }\n  }\n\n  return {\n    getMyCompany: [getMyCompany, getMyCompanyResult],\n    getMyCompanies: [getMyCompanies, getMyCompaniesResult],\n    createMember: [createMember, createMemberResult],\n    createCompany: [createCompany, createCompanyResult],\n    deleteMember: [deleteMember, deleteMemberResult],\n    acceptInvite: [acceptInvite, acceptInviteResult],\n    signinCompany: [signinCompany, signinCompanyResult],\n    updateMyCompany: [updateMyCompany, updateMyCompanyResult]\n  }\n}\n\nexport default useCompany\n","import gql from 'graphql-tag'\n\nimport { COMPANY_ATTRIBUTES, USER_ATTRIBUTES } from 'src/graphql/fragments'\n\nexport const GET_MY_COMPANY = gql`\n  query me {\n    myCompany {\n      ...companyAttributes\n    }\n  }\n  ${COMPANY_ATTRIBUTES}\n`\n\nexport const GET_MY_COMPANIES = gql`\n  query me {\n    myCompanies {\n      ...companyAttributes\n    }\n  }\n  ${COMPANY_ATTRIBUTES}\n`\n\nexport const UPDATE_MY_COMPANY = gql`\n  mutation($input: UpdateMyCompanyInput!) {\n    updateMyCompany(input: $input) {\n      ...companyAttributes\n    }\n  }\n  ${COMPANY_ATTRIBUTES}\n`\n\nexport const SIGNIN_COMPANY = gql`\n  mutation($input: SigninCompanyInput!) {\n    signinCompany(input: $input) {\n      token\n      user {\n        ...userAttributes\n      }\n      company {\n        ...companyAttributes\n      }\n    }\n  }\n  ${COMPANY_ATTRIBUTES}\n  ${USER_ATTRIBUTES}\n`\n\nexport const CREATE_MEMBER = gql`\n  mutation($input: CreateMemberInput!) {\n    createMember(input: $input) {\n      ...companyAttributes\n    }\n  }\n  ${COMPANY_ATTRIBUTES}\n`\n\nexport const DELETE_MEMBER = gql`\n  mutation($input: DeleteMemberInput!) {\n    deleteMember(input: $input) {\n      ...companyAttributes\n    }\n  }\n  ${COMPANY_ATTRIBUTES}\n`\n\nexport const ACCEPT_INVITE = gql`\n  mutation($input: AcceptInviteInput!) {\n    acceptInvite(input: $input) {\n      token\n      user {\n        ...userAttributes\n      }\n      company {\n        ...companyAttributes\n      }\n    }\n  }\n\n  ${COMPANY_ATTRIBUTES}\n  ${USER_ATTRIBUTES}\n`\n\nexport const CREATE_COMPANY = gql`\n  mutation($input: CreateCompanyInput!) {\n    createCompany(input: $input) {\n      ...companyAttributes\n    }\n  }\n  ${COMPANY_ATTRIBUTES}\n`\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'absolute',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: '100%',\n    [theme.breakpoints.up('sm')]: {\n      background: 'url(images/background.jpg)',\n      backgroundSize: 'cover'\n    }\n  }\n}))\n\nexport default useStyles\n","import React, { useEffect } from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\n\nimport { useMutation } from '@apollo/react-hooks'\nimport PropTypes from 'prop-types'\n\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Grid from '@material-ui/core/Grid'\n\nimport { GET_APP, UPDATE_APP } from 'src/graphql/app/queries'\nimport { GET_ME } from 'src/graphql/user/queries'\n\nimport useCompany from 'src/hooks/useCompany'\n\nimport { TOKEN_KEY, PAYMENT_METHOD_KEY } from 'src/utils/constants'\nimport { Paths, FirebaseEvents } from 'src/utils/enums'\nimport { save } from 'src/utils/localStorage'\nimport { getSearch } from 'src/utils/url'\n\nimport { analytics } from 'src/firebase'\n\nimport useStyles from './styles'\n\nconst MemberInviteView = () => {\n  const classes = useStyles()\n\n  const location = useLocation()\n  const history = useHistory()\n\n  const {\n    acceptInvite: [acceptInvite]\n  } = useCompany()\n\n  const options = {\n    refetchQueries: [{ query: GET_APP }, { query: GET_ME }],\n    awaitRefetchQueries: true\n  }\n\n  const [updateApp] = useMutation(UPDATE_APP, options)\n\n  useEffect(() => {\n    const title = 'Convite'\n    document.title = `${title} | Mee`\n    analytics.logEvent(FirebaseEvents.SCREEN_VIEW, { screen_name: title })\n  }, [])\n\n  useEffect(() => {\n    const { inviteToken, company, user } = getSearch(location)\n\n    const input = {\n      inviteToken,\n      company,\n      user\n    }\n\n    async function validateInvite() {\n      try {\n        const { token, signup, company } = await acceptInvite(input)\n        save(TOKEN_KEY, token)\n\n        // check if already has payment method\n        if (company.subscription) {\n          save(PAYMENT_METHOD_KEY, true)\n        }\n\n        await updateApp({ variables: { input: { logged: true, signup } } })\n\n        history.push(Paths.profile.path)\n      } catch ({ message }) {\n        console.log('ERROR:', message)\n      }\n    }\n\n    validateInvite()\n  }, [])\n\n  return (\n    <main className={classes.root}>\n      <Grid container spacing={2} direction='column' justify='center' alignItems='center'>\n        <Grid item>\n          <CircularProgress />\n        </Grid>\n        <Grid item>Validando o seu convite...</Grid>\n      </Grid>\n    </main>\n  )\n}\n\nMemberInviteView.propTypes = {\n  location: PropTypes.object\n}\n\nexport default MemberInviteView\n","import React from 'react'\n\nimport MemberInviteView from 'src/views/MemberInviteView'\n\nconst ExternalSigninContainer = () => {\n  return <MemberInviteView />\n}\n\nExternalSigninContainer.propTypes = {}\n\nExternalSigninContainer.defaultProps = {}\n\nexport default ExternalSigninContainer\n"],"sourceRoot":""}