{"version":3,"sources":["../node_modules/@material-ui/core/esm/withWidth/withWidth.js","utils/useWidth.js","views/ExternalSigninView/styles.js","views/ExternalSigninView/index.js","containers/ExternalSigninContainer/index.js"],"names":["isWidthUp","breakpoint","width","inclusive","arguments","length","undefined","breakpointKeys","indexOf","window","React","useWidth","theme","useTheme","breakpoints","keys","reverse","reduce","output","key","matches","useMediaQuery","up","useStyles","makeStyles","root","position","display","justifyContent","alignItems","height","background","backgroundSize","overlay","box","padding","spacing","borderRadius","textAlign","zIndex","drawer","icon","marginRight","button","ExternalSigninView","classes","location","useLocation","useMutation","SIGN_IN_GOOGLE_EMPLOYER","signinGoogleEmployer","loading","useEffect","title","document","analytics","logEvent","FirebaseEvents","SCREEN_VIEW","screen_name","handleSuccessEmployer","tokenId","a","getSearch","loginUUID","variables","googleIdToken","console","log","className","Typography","variant","color","paragraph","scope","clientId","process","REACT_APP_GOOGLE_CLIENT_ID","onSuccess","onFailure","response","render","renderProps","Button","onClick","fullWidth","ExternalSigninContainer","defaultProps"],"mappings":"kPAWWA,EAAY,SAAmBC,EAAYC,GACpD,IAAIC,IAAYC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,KAAmBA,UAAU,GAE/E,OAAID,EACKI,IAAeC,QAAQP,IAAeM,IAAeC,QAAQN,GAG/DK,IAAeC,QAAQP,GAAcM,IAAeC,QAAQN,I,GAY3B,qBAAXO,OAAyBC,YAAkBA,kB,yCCV3DC,MAZE,KACf,MAAMC,EAAQC,cAEd,MADa,IAAID,EAAME,YAAYC,MAAMC,UAElCC,QAAO,CAACC,EAAQC,KAEnB,MAAMC,EAAUC,YAAcT,EAAME,YAAYQ,GAAGH,IACnD,OAAQD,GAAUE,EAAUD,EAAMD,IACjC,OAAS,M,iBC2BDK,MAzCGC,aAAYZ,IAAD,CAC3Ba,KAAM,CACJC,SAAU,WACVC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZ3B,MAAO,OACP4B,OAAQ,OACR,CAAClB,EAAME,YAAYQ,GAAG,OAAQ,CAC5BS,WAAY,6BACZC,eAAgB,UAGpBC,QAAS,CACPP,SAAU,WACVxB,MAAO,OACP4B,OAAQ,OACRC,WAAY,sBAEdG,IAAK,CACHhC,MAAO,OACP4B,OAAQ,OACRK,QAASvB,EAAMwB,QAAQ,GACvBC,aAAc,EACdN,WAAY,OACZO,UAAW,SACXC,OAAQ3B,EAAM2B,OAAOC,OACrB,CAAC5B,EAAME,YAAYQ,GAAG,OAAQ,CAC5BpB,MAAOU,EAAMwB,QAAQ,IACrBN,OAAQ,OACRO,aAAczB,EAAMwB,QAAQ,KAGhCK,KAAM,CACJC,YAAa9B,EAAMwB,QAAQ,IAE7BO,OAAQ,CACNzC,MAAO,Y,OCyDI0C,MAxEY,KACzB,MAAMC,EAAUtB,IACVrB,EAAQS,IAERmC,EAAWC,cAJc,EAKaC,YAAYC,KALzB,mBAKxBC,EALwB,KAKAC,EALA,KAKAA,QAE/BC,qBAAU,KACR,MAAMC,EAAQ,gBACdC,SAASD,MAAT,UAAoBA,EAApB,UACAE,IAAUC,SAASC,IAAeC,YAAa,CAAEC,YAAaN,MAC7D,IAEH,MAAMO,EAAqB,uCAAG,YAAO,QAAEC,IAAT,iBAAAC,EAAA,+DACNC,YAAUjB,GAAxBkB,EADoB,EACpBA,UADoB,kBAIpBd,EAAqB,CAAEe,UAAW,CAAEC,cAAeL,EAASG,eAJxC,sDAM1BG,QAAQC,IAAI,iCAAZ,MAN0B,wDAAH,sDAY3B,OACE,uBAAMC,UAAWxB,EAAQpB,KAAzB,UACGzB,EAAU,KAAME,IAAU,qBAAKmE,UAAWxB,EAAQZ,UACnD,sBAAKoC,UAAWxB,EAAQX,IAAxB,UACE,cAACoC,EAAA,EAAD,CAAYC,QAAQ,KAApB,iCACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,gBAAgBC,WAAS,EAAxD,qEAGA,cAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,cAAcC,WAAS,EAAtD,oDAGA,cAAC,cAAD,CACEJ,UAAWxB,EAAQF,OACnB+B,MAAO,gBACPC,SAAUC,mIAAYC,2BACtBC,UAAWlB,EACXmB,UAlBeC,MAmBfC,OAASC,GACP,eAACC,EAAA,EAAD,CACEd,UAAWxB,EAAQF,OACnB4B,QAAQ,YACRC,MAAM,UACNY,QAASF,EAAYE,QACrBjC,QAASA,EACTkC,WAAS,EANX,UAQE,cAAC,IAAD,CAAQhB,UAAWxB,EAAQJ,OAR7B,yBAaJ,wBACA,wBACA,wBACA,cAAC6B,EAAA,EAAD,CAAYC,QAAQ,UAApB,yHC/ER,MAAMe,EAA0B,IACvB,cAAC,EAAD,IAKTA,EAAwBC,aAAe,GAExBD","file":"static/js/46.950c5b28.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport useTheme from '../styles/useTheme';\nimport { keys as breakpointKeys } from '../styles/createBreakpoints';\nimport useMediaQuery from '../useMediaQuery'; // By default, returns true if screen width is the same or greater than the given breakpoint.\n\nexport var isWidthUp = function isWidthUp(breakpoint, width) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n}; // By default, returns true if screen width is the same or less than the given breakpoint.\n\nexport var isWidthDown = function isWidthDown(breakpoint, width) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\nvar withWidth = function withWidth() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (Component) {\n    var _options$withTheme = options.withTheme,\n        withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme,\n        _options$noSSR = options.noSSR,\n        noSSR = _options$noSSR === void 0 ? false : _options$noSSR,\n        initialWidthOption = options.initialWidth;\n\n    function WithWidth(props) {\n      var contextTheme = useTheme();\n      var theme = props.theme || contextTheme;\n\n      var _getThemeProps = getThemeProps({\n        theme: theme,\n        name: 'MuiWithWidth',\n        props: _extends({}, props)\n      }),\n          initialWidth = _getThemeProps.initialWidth,\n          width = _getThemeProps.width,\n          other = _objectWithoutProperties(_getThemeProps, [\"initialWidth\", \"width\"]);\n\n      var _React$useState = React.useState(false),\n          mountedState = _React$useState[0],\n          setMountedState = _React$useState[1];\n\n      useEnhancedEffect(function () {\n        setMountedState(true);\n      }, []);\n      /**\n       * innerWidth |xs      sm      md      lg      xl\n       *            |-------|-------|-------|-------|------>\n       * width      |  xs   |  sm   |  md   |  lg   |  xl\n       */\n\n      var keys = theme.breakpoints.keys.slice().reverse();\n      var widthComputed = keys.reduce(function (output, key) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        var matches = useMediaQuery(theme.breakpoints.up(key));\n        return !output && matches ? key : output;\n      }, null);\n\n      var more = _extends({\n        width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption\n      }, withThemeOption ? {\n        theme: theme\n      } : {}, other); // When rendering the component on the server,\n      // we have no idea about the client browser screen width.\n      // In order to prevent blinks and help the reconciliation of the React tree\n      // we are not rendering the child component.\n      //\n      // An alternative is to use the `initialWidth` property.\n\n\n      if (more.width === undefined) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(Component, more);\n    }\n\n    process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\n      /**\n       * As `window.innerWidth` is unavailable on the server,\n       * we default to rendering an empty component during the first mount.\n       * You might want to use an heuristic to approximate\n       * the screen width of the client browser screen width.\n       *\n       * For instance, you could be using the user-agent or the client-hints.\n       * https://caniuse.com/#search=client%20hint\n       */\n      initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n      /**\n       * @ignore\n       */\n      theme: PropTypes.object,\n\n      /**\n       * Bypass the width calculation logic.\n       */\n      width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n    } : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      WithWidth.displayName = \"WithWidth(\".concat(getDisplayName(Component), \")\");\n    }\n\n    hoistNonReactStatics(WithWidth, Component);\n    return WithWidth;\n  };\n};\n\nexport default withWidth;","import { useTheme } from '@material-ui/core/styles'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\n\n/**\n * Be careful using this hook. It only works because the number of\n * breakpoints in theme is static. It will break once you change the number of\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n */\nconst useWidth = () => {\n  const theme = useTheme()\n  const keys = [...theme.breakpoints.keys].reverse()\n  return (\n    keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key))\n      return !output && matches ? key : output\n    }, null) || 'xs'\n  )\n}\n\nexport default useWidth\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'absolute',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: '100%',\n    [theme.breakpoints.up('sm')]: {\n      background: 'url(images/background.jpg)',\n      backgroundSize: 'cover'\n    }\n  },\n  overlay: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    background: 'rgba(0, 0, 0, 0.2)'\n  },\n  box: {\n    width: '100%',\n    height: '100%',\n    padding: theme.spacing(3),\n    borderRadius: 0,\n    background: '#fff',\n    textAlign: 'center',\n    zIndex: theme.zIndex.drawer,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(55),\n      height: 'auto',\n      borderRadius: theme.spacing(1)\n    }\n  },\n  icon: {\n    marginRight: theme.spacing(1)\n  },\n  button: {\n    width: '100%'\n  }\n}))\n\nexport default useStyles\n","import React, { useEffect } from 'react'\nimport { GoogleLogin } from 'react-google-login'\nimport { useLocation } from 'react-router-dom'\n\nimport { useMutation } from '@apollo/react-hooks'\nimport PropTypes from 'prop-types'\n\nimport Typography from '@material-ui/core/Typography'\nimport { isWidthUp } from '@material-ui/core/withWidth'\n\nimport Google from 'src/icons/google-icon'\n\nimport Button from 'src/components/Button'\n\nimport { SIGN_IN_GOOGLE_EMPLOYER } from 'src/graphql/user/queries'\n\nimport { FirebaseEvents } from 'src/utils/enums'\nimport { getSearch } from 'src/utils/url'\nimport useWidth from 'src/utils/useWidth'\n\nimport { analytics } from 'src/firebase'\n\nimport useStyles from './styles'\n\nconst ExternalSigninView = () => {\n  const classes = useStyles()\n  const width = useWidth()\n\n  const location = useLocation()\n  const [signinGoogleEmployer, { loading }] = useMutation(SIGN_IN_GOOGLE_EMPLOYER)\n\n  useEffect(() => {\n    const title = 'Login Externo'\n    document.title = `${title} | Mee`\n    analytics.logEvent(FirebaseEvents.SCREEN_VIEW, { screen_name: title })\n  }, [])\n\n  const handleSuccessEmployer = async ({ tokenId }) => {\n    const { loginUUID } = getSearch(location)\n\n    try {\n      await signinGoogleEmployer({ variables: { googleIdToken: tokenId, loginUUID } })\n    } catch (error) {\n      console.log('[handleSuccessEmployer] ERROR:', error)\n    }\n  }\n\n  const handleFailure = (response) => {}\n\n  return (\n    <main className={classes.root}>\n      {isWidthUp('sm', width) && <div className={classes.overlay} />}\n      <div className={classes.box}>\n        <Typography variant='h4'>Bem-vindo(a) ao Mee</Typography>\n        <Typography variant='h6' color='textSecondary' paragraph>\n          A solução mais simples para o seu ponto de venda.\n        </Typography>\n        <Typography variant='h6' color='textPrimary' paragraph>\n          Entrar como dono de um estabelecimento\n        </Typography>\n        <GoogleLogin\n          className={classes.button}\n          scope={'profile email'}\n          clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n          onSuccess={handleSuccessEmployer}\n          onFailure={handleFailure}\n          render={(renderProps) => (\n            <Button\n              className={classes.button}\n              variant='contained'\n              color='primary'\n              onClick={renderProps.onClick}\n              loading={loading}\n              fullWidth\n            >\n              <Google className={classes.icon} />\n              Entrar com Google\n            </Button>\n          )}\n        />\n        <div />\n        <div />\n        <div />\n        <Typography variant='caption'>\n          Ao continuar, você concorda com os Termos de Serviço e com a Política de Privacidade do\n          Mee\n        </Typography>\n      </div>\n    </main>\n  )\n}\n\nExternalSigninView.propTypes = {\n  location: PropTypes.object\n}\n\nexport default ExternalSigninView\n","import React from 'react'\n\nimport ExternalSigninView from 'src/views/ExternalSigninView'\n\nconst ExternalSigninContainer = () => {\n  return <ExternalSigninView />\n}\n\nExternalSigninContainer.propTypes = {}\n\nExternalSigninContainer.defaultProps = {}\n\nexport default ExternalSigninContainer\n"],"sourceRoot":""}